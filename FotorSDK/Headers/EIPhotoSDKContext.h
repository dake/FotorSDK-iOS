//
//  EIPhotoSDKContext.h
//  EIPhotoSDK
//
//  Created by yanhe on 12/10/13.
//  Copyright (c) 2013å¹´ Everimaging. All rights reserved.
//

#import <Foundation/Foundation.h>


/**
 @brief
 
 EIPhotoSDK Contexts are generated by calling the createContextWithImage: or createContextWithImage:maxPixelSize: methods of EIPhotoSDKSession.
 A context encapsulates an input image and an expected output size. If not specified, the output size defaults to the image size, you can call method `supportedOutputImagePixelSize` to get output size infomation. In the Basic SDK, the
 output size is scaled down to a maximum of 5MP (if necessary, maintaining aspect ratio). There is no such limitation in the Premium SDK.
 
 Calling `renderWithBegin:complete:` on a context causes all modifications tracked in the EIPhotoSDKSession (which tracks user generated photo-editing actions in
 an EIPhotoSDKEditorController) to be replayed on the context's input image asynchronously. When rendering is complete, the completion block passed
 into `renderWithBegin:complete:` will be called with the finalized image, whose size will match the context's size. If the session contains no tracked actions (i.e., the user made
 no edits before pressing "Done" or pressed "Cancel"), the result image will be `nil`.
 
 Note: `renderWithBegin:complete:` may only be called once per context.
 
 
 @notice
 
 By default, contexts take advantage of GPU acceleration. If an input image is too large to be represented as an OpenGL texture, it will be scaled to Maximum texture size. Maximum texture size is measured by the maximum dimension of an image, and
 both the width and height of the input image must be less than this maximum dimension. iPhone 3GS, iPhone 4, and iPad 1 have a maximum texture
 dimension of 2048 (4MP for a square image), while iPhone 5S, iPhone 5C, iPhone 5, iPhone 4S, iPad 2, and new iPads have a maximum texture dimension of 4096 (16MP for a square image).
 
 The context will wait until the session is closed before beginning to render the output image. This is because GPU processing is very fast for most user action sets, and
 waiting until the session is closed to begin rendering saves memory and processing power.
 
 Some things to note about using contexts:
 
 - We recommend choosing a maximum output resolution that suits the purposes of your application to provide the best experience for your users.
 - Processing large images can consume a lot of memory and time. It may be necessary to free up resources and/or display an activity indicator
 while a context is executing.
 */


@class EIPhotoSDKSession;
NS_CLASS_AVAILABLE_IOS(6_0) @interface EIPhotoSDKContext : NSObject

@property(nonatomic,weak,readonly) EIPhotoSDKSession *session; /**< The session that the context was generated from. */
@property(nonatomic,assign,readonly) CGSize size; /**< The size that the context's image will be output at. */
@property(nonatomic,assign,readonly) BOOL cancelled; /**< Specifies if the context's rendering has been cancelled. */
@property(nonatomic,assign,readonly) BOOL modified; /**< Specifies if the context's session has been modified. */
/**
 Specifies whether rendering has begun on the context.
 
 If YES, any `renderWithBegin:complete:` call will have no effect.
 */
@property(nonatomic,assign,readonly) BOOL hasBegunRendering;



/**
 @brief	The maximum pixel size, output image can be rendered on context
 
 @return The maximum size (measured in pixels)
 */
+ (size_t)supportedOutputImagePixelSize;


/**
 Replays all actions tracked by the generating EIPhotoSDKSession on the context's image.
 
 The completion block will not be called until after the `session` is closed, i.e. until the user has closed the EIPhotoSDKEditorController that generated the
 `session`. If the user pressed `Cancel` or took no actions (i.e. undo to original image) before pressing `Done`, the `result` UImage in the completion block will be nil and `completed` will be YES. Otherwise, it
 will contain the rendered image.
 
 Note: This method may be called once per context, as it would not make sense to run the same actions on the same image twice. Check hasBegunRendering to
 see if render has been called.
 
 @param beginBlock The block to be called when the image is going to render.
 @param completion The block to be called when the image's render is complete.
 the `completed` parameter in this block indicated whether render operation was completed.
 
 
 @warning Calling this method from any thread other in the main thread may result in undefined behavior.
 */
- (void)renderWithBegin:(void (^)(void))beginBlock complete:(void (^)(UIImage *result, BOOL completed))completion;

/**
 Cancels the context's rendering.
 
 @warning Calling this method from any thread other in the main thread may result in undefined behavior.
 */
- (void)cancelRendering;

@end
